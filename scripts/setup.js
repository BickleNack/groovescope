#!/usr/bin/env node

/**
 * GrooveScope Backend Setup Script
 * Helps with initial setup and validation
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// Colors for console output
const colors = {
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  white: '\x1b[37m',
  reset: '\x1b[0m'
};

function colorize(text, color) {
  return `${colors[color]}${text}${colors.reset}`;
}

function log(message, color = 'white') {
  console.log(colorize(message, color));
}

function question(prompt) {
  return new Promise((resolve) => {
    rl.question(colorize(prompt, 'cyan'), resolve);
  });
}

async function checkFile(filePath, description) {
  try {
    await fs.promises.access(filePath);
    log(`‚úì ${description} exists`, 'green');
    return true;
  } catch {
    log(`‚úó ${description} missing`, 'red');
    return false;
  }
}

async function createEnvFile() {
  log('\nüìù Setting up environment file...', 'blue');
  
  const envPath = '.env';
  const examplePath = 'env.example';
  
  const envExists = await checkFile(envPath, '.env file');
  
  if (envExists) {
    const overwrite = await question('Environment file exists. Overwrite? (y/N): ');
    if (overwrite.toLowerCase() !== 'y') {
      log('Skipping environment setup', 'yellow');
      return;
    }
  }
  
  log('\nPlease provide the following configuration values:', 'yellow');
  
  const rapidApiKey = await question('RapidAPI Key (from youtube-to-mp315): ');
  const supabaseUrl = await question('Supabase URL: ');
  const supabaseKey = await question('Supabase Anon Key: ');
  const port = await question('Port (default 3000): ') || '3000';
  const nodeEnv = await question('Environment (development/production, default development): ') || 'development';
  
  const envContent = `# GrooveScope Backend Environment Configuration
# Generated by setup script

# Server Configuration
NODE_ENV=${nodeEnv}
PORT=${port}

# RapidAPI Configuration
RAPIDAPI_KEY=${rapidApiKey}

# Supabase Configuration
SUPABASE_URL=${supabaseUrl}
SUPABASE_ANON_KEY=${supabaseKey}

# Optional: Frontend URL for CORS
FRONTEND_URL=

# Optional: Service role key for enhanced security
# SUPABASE_SERVICE_ROLE_KEY=
`;
  
  try {
    await fs.promises.writeFile(envPath, envContent);
    log('‚úì Environment file created successfully', 'green');
  } catch (error) {
    log(`‚úó Failed to create environment file: ${error.message}`, 'red');
  }
}

async function validateEnvironment() {
  log('\nüîç Validating environment...', 'blue');
  
  try {
    require('dotenv').config();
    
    const required = [
      'RAPIDAPI_KEY',
      'SUPABASE_URL',
      'SUPABASE_ANON_KEY'
    ];
    
    const missing = required.filter(key => !process.env[key]);
    
    if (missing.length === 0) {
      log('‚úì All required environment variables are set', 'green');
      return true;
    } else {
      log(`‚úó Missing environment variables: ${missing.join(', ')}`, 'red');
      return false;
    }
  } catch (error) {
    log(`‚úó Environment validation failed: ${error.message}`, 'red');
    return false;
  }
}

async function testDependencies() {
  log('\nüì¶ Testing dependencies...', 'blue');
  
  const dependencies = [
    'express',
    'cors',
    'axios',
    '@supabase/supabase-js'
  ];
  
  let allGood = true;
  
  for (const dep of dependencies) {
    try {
      require(dep);
      log(`‚úì ${dep}`, 'green');
    } catch {
      log(`‚úó ${dep} not found`, 'red');
      allGood = false;
    }
  }
  
  if (!allGood) {
    log('\nRun "npm install" to install missing dependencies', 'yellow');
  }
  
  return allGood;
}

async function testConnections() {
  log('\nüîó Testing connections...', 'blue');
  
  try {
    // Test Supabase connection
    const { createClient } = require('@supabase/supabase-js');
    const supabase = createClient(
      process.env.SUPABASE_URL,
      process.env.SUPABASE_ANON_KEY
    );
    
    const { error } = await supabase.from('audio_cache').select('count').limit(1);
    
    if (error) {
      log(`‚úó Supabase connection failed: ${error.message}`, 'red');
    } else {
      log('‚úì Supabase connection successful', 'green');
    }
  } catch (error) {
    log(`‚úó Supabase test failed: ${error.message}`, 'red');
  }
  
  // Test RapidAPI key format
  const rapidApiKey = process.env.RAPIDAPI_KEY;
  if (rapidApiKey && rapidApiKey.length > 10) {
    log('‚úì RapidAPI key format looks valid', 'green');
  } else {
    log('‚úó RapidAPI key appears invalid', 'red');
  }
}

async function generateGitHubWorkflow() {
  log('\n‚öôÔ∏è  Generating GitHub workflow...', 'blue');
  
  const workflowDir = '.github/workflows';
  const workflowPath = path.join(workflowDir, 'deploy.yml');
  
  try {
    await fs.promises.mkdir(workflowDir, { recursive: true });
    
    const workflowContent = `name: Deploy to Render

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests
      run: npm test || echo "No tests configured"
    
    - name: Check linting
      run: npm run lint || echo "No linting configured"

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Trigger Render Deploy
      run: |
        echo "Render will auto-deploy from this push"
        echo "Make sure your Render service is connected to this repository"
`;
    
    await fs.promises.writeFile(workflowPath, workflowContent);
    log('‚úì GitHub workflow created', 'green');
  } catch (error) {
    log(`‚úó Failed to create GitHub workflow: ${error.message}`, 'red');
  }
}

async function showNextSteps() {
  log('\nüöÄ Next Steps:', 'magenta');
  log('1. Push your code to GitHub', 'white');
  log('2. Connect your GitHub repo to Render', 'white');
  log('3. Set environment variables in Render dashboard', 'white');
  log('4. Run the SQL script in your Supabase project', 'white');
  log('5. Deploy and test your API', 'white');
  
  log('\nüìö Useful commands:', 'blue');
  log('  npm start          - Start production server', 'white');
  log('  npm run dev        - Start development server', 'white');
  log('  npm test           - Run tests (if configured)', 'white');
  
  log('\nüîó Important URLs:', 'blue');
  log('  Health Check: http://localhost:3000/api/health', 'white');
  log('  API Docs: See README.md', 'white');
  log('  RapidAPI: https://rapidapi.com/marcocollatina/api/youtube-to-mp315', 'white');
}

async function main() {
  log(colorize('üéµ GrooveScope Backend Setup', 'magenta'));
  log(colorize('================================', 'magenta'));
  
  // Check if package.json exists
  const packageExists = await checkFile('package.json', 'package.json');
  if (!packageExists) {
    log('This doesn\'t appear to be a GrooveScope backend directory', 'red');
    process.exit(1);
  }
  
  try {
    // Environment setup
    await createEnvFile();
    
    // Validate environment
    const envValid = await validateEnvironment();
    
    // Test dependencies
    const depsValid = await testDependencies();
    
    // Test connections (only if env is valid)
    if (envValid) {
      await testConnections();
    }
    
    // Generate GitHub workflow
    const createWorkflow = await question('\nCreate GitHub workflow? (Y/n): ');
    if (createWorkflow.toLowerCase() !== 'n') {
      await generateGitHubWorkflow();
    }
    
    // Show next steps
    await showNextSteps();
    
    if (envValid && depsValid) {
      log('\n‚úÖ Setup completed successfully!', 'green');
      log('You can now start the server with: npm start', 'green');
    } else {
      log('\n‚ö†Ô∏è  Setup completed with warnings', 'yellow');
      log('Please resolve the issues above before starting the server', 'yellow');
    }
    
  } catch (error) {
    log(`\n‚ùå Setup failed: ${error.message}`, 'red');
    process.exit(1);
  } finally {
    rl.close();
  }
}

// Run setup if this file is executed directly
if (require.main === module) {
  main().catch(console.error);
}

module.exports = { main };
